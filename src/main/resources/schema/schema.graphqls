input OrganisationInput {
    name: String!
}

input LoginInput {
    email: String!
    password: String!
}

input RegisterInput {
    email: String!
    password: String!
    name: String
}

type Organisation @connection {
    id: String!
    name: String!
    createdBy: String!
}

type Department @connection {
    id: String!
    name: String!
    createdBy: String!
}

type User @connection {
    id: String!
    name: String!
    email: String!
    seniority: String
}

type LoginResponse {
    token: String!
    user: User!
}

type Query {
    organisations (first: Int, last: Int, after: String): OrganisationConnection
    organisation (id: String!): Organisation
    currentUser: User

    departments (organisationId: String!, first: Int, last: Int, after: String): DepartmentConnection
    department (id: String!): Department
}

type Mutation {
    createOrganisation (input: OrganisationInput!): Organisation
    organisationAddUser (organisationId: String!, email: String!): Organisation

    createDepartment (organisationId: String!, name: String!): Department
    departmentAddUser (departmentId: String!, email: String!): Department

    login (input: LoginInput!): LoginResponse
    register (input: RegisterInput!): LoginResponse
}