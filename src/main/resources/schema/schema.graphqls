scalar Date

input OrganisationInput {
    name: String!
}

input LoginInput {
    email: String!
    password: String!
}

input RegisterInput {
    email: String!
    password: String!
    name: String
}

type Organisation @connection {
    id: String!
    name: String!
    createdBy: String!
}

type Department @connection {
    id: String!
    name: String!
    createdBy: String!
}

type User @connection {
    id: String!
    name: String!
    email: String!
    seniority: String
}

type LoginResponse {
    token: String!
    user: User!
}

type Schedule @connection {
    id: String!
    name: String!
    start: Date!
    end: Date!
    score: String
    status: String
}

type Shift {
    id: String!
    start: Date!
    end: Date!
    user: User
    requiredSeniority: Seniority!
}

enum AvailabilityType {
    DESIRED
    UNDESIRED
    UNAVAILABLE

    NONE
}

enum Seniority {
    JUNIOR
    SENIOR
    MIDDLE
}

type Availability {
    id: String!
    date: Date!
    type: AvailabilityType!
}

input AvailabilityInput {
    # only for admins
    userId: String

    date: Date!
    type: AvailabilityType!
}

type Query {
    organisations (first: Int, last: Int, after: String): OrganisationConnection
    organisation (id: String!): Organisation
    
    currentUser: User

    departments (organisationId: String!, first: Int, last: Int, after: String): DepartmentConnection
    department (id: String!): Department
    departmentUsers(id: String!): UserConnection

    schedule (id: String!): Schedule
    schedules (departmentId: String!): ScheduleConnection

    shifts (scheduleId: String!): [Shift!]!

    availabilities (from: Date!, to: Date!): [Availability!]!
}

type Mutation {
    createOrganisation (input: OrganisationInput!): Organisation
    organisationAddUser (organisationId: String!, email: String!): Organisation

    createDepartment (organisationId: String!, name: String!): Department
    departmentAddUser (departmentId: String!, name: String!, email: String!, seniority: Seniority!): Department
    
    login (input: LoginInput!): LoginResponse
    register (input: RegisterInput!): LoginResponse

    createSchedule (departmentId: String!, name: String!, start: Date!, end: Date!): Schedule
    startSolving (scheduleId: String!): Boolean
    stopSolving (scheduleId: String!): Boolean

    setAvailability (input: AvailabilityInput!): Availability
}